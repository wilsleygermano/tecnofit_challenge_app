// Mocks generated by Mockito 5.4.4 from annotations
// in tecnofit_challenge_app/test/features/singin/signin_bloc/signin_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tecnofit_challenge_app/core/generics/resource.dart' as _i2;
import 'package:tecnofit_challenge_app/core/models/user.dart' as _i5;
import 'package:tecnofit_challenge_app/features/signin/domain/use_cases/get_user_use_case.dart'
    as _i6;
import 'package:tecnofit_challenge_app/features/signin/domain/use_cases/signin_a_user_use_case.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResource_0<T, E> extends _i1.SmartFake
    implements _i2.Resource<T, E> {
  _FakeResource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SigninAUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSigninAUserUseCase extends _i1.Mock
    implements _i3.SigninAUserUseCase {
  @override
  _i4.Future<_i2.Resource<_i5.User, String>> call({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.Resource<_i5.User, String>>.value(
            _FakeResource_0<_i5.User, String>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Resource<_i5.User, String>>.value(
                _FakeResource_0<_i5.User, String>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Resource<_i5.User, String>>);
}

/// A class which mocks [GetUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserUseCase extends _i1.Mock implements _i6.GetUserUseCase {
  @override
  _i4.Future<_i2.Resource<_i5.User, String>> call({int? id = 4}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<_i2.Resource<_i5.User, String>>.value(
            _FakeResource_0<_i5.User, String>(
          this,
          Invocation.method(
            #call,
            [],
            {#id: id},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Resource<_i5.User, String>>.value(
                _FakeResource_0<_i5.User, String>(
          this,
          Invocation.method(
            #call,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.Resource<_i5.User, String>>);
}
